{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "RawTwmGlobal",
  "type": "object",
  "properties": {
    "exclude_path_components": {
      "description": "List of path components which will *exclude* a directory from being considered a workspace. If unset, defaults to an empty list.\n\nA common use case would be to exclude things like `node_modules`, `target`, `__pycache__`, etc.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "type": "string"
      }
    },
    "layouts": {
      "description": "List of layout definitions made available when opening a workspace. If unset, defaults to an empty list.\n\nThe layouts in this list can be used as the `default_layout` in a workspace definition and also will be available in the layout list when using `-l/--layout` command line flag.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "$ref": "#/definitions/LayoutDefinition"
      }
    },
    "max_search_depth": {
      "description": "Maximum depth to search for workspaces inside the `search_paths` directories. If unset, defaults to 3.",
      "type": [
        "integer",
        "null"
      ],
      "format": "uint",
      "minimum": 0.0
    },
    "search_paths": {
      "description": "List of directories to have twm search for workspaces.\n\nIf unset, defaults to `~` (shell expansion is supported).\n\nBe careful to not make your search paths overlap, e.g. if you include `~/projects` and `~/projects/foo/bar` with `max_search_depth: 3`, `~/projects/foo/bar` will be searched twice and results will be displayed twice in the picker. Generally it's easiest to just include the parent directory and increase `max_search_depth` if needed.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "type": "string"
      }
    },
    "session_name_path_components": {
      "description": "Default number of components of the workspace directory to use for the created session name. If unset, defaults to 1.\n\nE.g. if you open a workspace at `/home/vinny/projects/foo/bar` and `session_name_path_components` is set to 1, The session name will be `bar`. If 2, `foo/bar`, etc.",
      "type": [
        "integer",
        "null"
      ],
      "format": "uint",
      "minimum": 0.0
    },
    "workspace_definitions": {
      "description": "List of configurations for workspaces.\n\nIf unset, the default twm workspace definition is any directory containing a `.git` file/directory or a `.twm.yaml` layout file.\n\nWhen a directory is found that matches a workspace definition the first match, in order of appearance in this list, is the workspace \"type\" that will be for things like choosing which layout to apply to the session and in setting the `TWM_TYPE` environment variable",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "$ref": "#/definitions/WorkspaceDefinitionConfig"
      }
    }
  },
  "additionalProperties": false,
  "definitions": {
    "LayoutDefinition": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "commands": {
          "description": "List of commands to run when a session using this layout is initialized.\n\nIf unset, no commands are run when the session is initialized.\n\nCommands defined here are run after commands from inherited layouts.\n\nThese commands are passed to the  shell as-is via tmux's `send-keys` command.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "inherits": {
          "description": "List of layout names that this layout should inherit commands from.\n\nIf unset, commands are not inherited from any other layouts.\n\nCommands are inherited in the order they are listed.\n\nOnly layouts in the main `twm.yaml` configuration file can be used in this list. There is no way for twm to find all of the local layouts that might exist in other workspaces.\n\nThis is useful when you want to share complex base layouts that might slightly differ between different types of workspaces. For example, you might define a complicated layout with 5 windows and 20 panes, but want to run different commands in some panes Python workspaces than in Rust workspaces. You could define the window & pane layout in a base layout and inherit from it in your Python and Rust layouts, simply using the `commands` field to run the workspace-specific commands for each respective workspace type.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name of the layout.\n\nThis is the name that should be referenced in workspace definitions' `default_layout` field.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "WorkspaceDefinitionConfig": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "default_layout": {
          "description": "The name of the layout to apply to a session during initialization.\n\nIf unset, no layout will be applied by default.\n\nThis option can be overridden either by using the `-l/--layout` command line flag, which will prompt you to select a layout from the list of configured layouts, or by the presence of a `.twm.yaml` local layout configuration file in the workspace directory.",
          "type": [
            "string",
            "null"
          ]
        },
        "has_all_files": {
          "description": "List of files for which all must be present in a directory to be considered a workspace of this type.\n\nIf unset, this constraint is simply ignored.\n\nFor example, if the list is `[\"flake.nix\", \".envrc\"]`, only directories with *both* files present can match this workspace definition.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "has_any_file": {
          "description": "List of files for which at least one must be present in a directory to be considered a workspace of this type.\n\nIf unset, this constraint is simply ignored.\n\nFor example if the list is `[\"requirements.txt\", \"Pipfile\", \"pyproject.toml\", \"poetry.lock\", \"setup.py\"]`, a directory not containing *any* of those files cannot match this workspace definition.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "missing_all_files": {
          "description": "List of files for which all must be missing in a directory to be considered a workspace of this type.\n\nIf unset, this constraint is simply ignored.\n\nFor example, if the list is `[\"node_modules\", \"target\"]`, directories containing *either* `node_modules` or `target` cannot match this workspace definition.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "missing_any_file": {
          "description": "List of files for which at least one must be missing in a directory to be considered a workspace of this type.\n\nIf unset, this constraint is simply ignored.\n\nFor example, if the list is `[\"node_modules\", \"target\"]`, directories containing *both* `node_modules` and `target` cannot match this workspace definition.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name for the workspace type defined by the list item.\n\nThis name corresponds to the `TWM_TYPE` environment variable that will be set inside a session.",
          "type": "string"
        }
      },
      "additionalProperties": false
    }
  }
}
